# -*- coding: utf-8 -*-
"""Regression_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hP0oZ20uWbCNYEqtl6byk6eFAZggAXsm
"""

pip install -r requirements.txt



# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import pandas as pd
# import pickle
# from tensorflow.keras.models import load_model
# 
# # Load model and preprocessors
# model = load_model('/content/drive/MyDrive/ANN_Project/ANN_Regression_salary_Project/Regression_model.h5')
# scaler = pickle.load(open('/content/drive/MyDrive/ANN_Project/ANN_Regression_salary_Project/scaler.pkl', 'rb'))
# label_encoder_gender = pickle.load(open('/content/drive/MyDrive/ANN_Project/ANN_Regression_salary_Project/label_encoder_gender.pkl', 'rb'))
# one_hot_encoder_geo = pickle.load(open('/content/drive/MyDrive/ANN_Project/ANN_Regression_salary_Project/one_hot_encoder_geo.pkl', 'rb'))
# 
# # Title
# st.title(" Estimated Salary Prediction (ANN Regression)")
# 
# # Input fields
# credit_score = st.slider("Credit Score", 100, 850)
# gender = st.selectbox("Gender", ['Male', 'Female'])
# age = st.slider("Age", 18, 100)
# tenure = st.slider("Tenure", 0, 10)
# balance = st.number_input("Balance", value=50000.0)
# num_products = st.slider("Number of Products", 1, 4)
# has_credit_card = st.selectbox("Has Credit Card", [0, 1])
# is_active_member = st.selectbox("Is Active Member", [0, 1])
# exited = st.selectbox("Is Exited?", ['exited', 'not_exited'])
# geography = st.selectbox("Geography", ['France', 'Germany', 'Spain'])
# 
# if st.button("Predict"):
#     # Prepare raw input dictionary
#     input_data = {
#         'CreditScore': credit_score,
#         'Gender': gender,
#         'Age': age,
#         'Tenure': tenure,
#         'Balance': balance,
#         'NumOfProducts': num_products,
#         'HasCrCard': has_credit_card,
#         'IsActiveMember': is_active_member,
#         'Geography': geography,
#         'Exited': 1 if exited == 'exited' else 0  # encode exited
#     }
# 
#     # Convert to DataFrame
#     input_df = pd.DataFrame([input_data])
# 
#     # Encode gender
#     input_df['Gender'] = label_encoder_gender.transform(input_df['Gender'])
# 
#     # One-hot encode geography
#     geo_encoded = one_hot_encoder_geo.transform(input_df[['Geography']]).toarray()
#     geo_encoded_df = pd.DataFrame(geo_encoded, columns=one_hot_encoder_geo.get_feature_names_out(['Geography']))
# 
#     # Final feature set
#     input_df = input_df.drop('Geography', axis=1)
#     final_input = pd.concat([input_df, geo_encoded_df], axis=1)
# 
#     # Scale input
#     input_scaled = scaler.transform(final_input)
# 
#     # Predict
#     prediction = model.predict(input_scaled)[0][0]
# 
#     # Display result
#     st.subheader(" Predicted Estimated Salary")
#     st.success(f" {prediction:,.2f}")
#

from google.colab import drive
drive.mount('/content/drive')

!wget -q -O - ipv4.icanhazip.com

!streamlit run app.py & npx localtunnel --port 8501

!ls /content/drive/MyDrive/ANN_Project/ANN_Regression_salary_Project/

